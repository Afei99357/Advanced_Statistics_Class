pvalues <- compare_full_and_reduce_model(dataCountsNorm, reducedFactors, fullModelFactor)
hist(pvalues)
adjusted_pvalues_anova <- p.adjust(pvalues, method="BH")
ResultsComparedModels <- counts(adjusted_pvalues_anova)
### Question D:
pValuesOneWayAnova <- vector()
pValuesRegression <- vector()
pValueModelDiff <- vector()
index <- vector()
cats <- factor( c( rep("day3",3),rep("week12",3),rep("week20",5)  ))
for( i in 1:nrow(myTNorm))
{
index[i] <- i
for(i in 1: nrow(dataframe)){
row_data <- as.numeric(dataframe[i,])
reduced_model <- lm(row_data ~ reducedFactors)
full_model <- lm(row_data ~ fullModelFactor)
pValuesRegression[i] <- anova(reduced_model)$"Pr(>F)"[1]
pValuesOneWayAnova[i] <- anova(full_model)$"Pr(>F)"[1]
reduced <- sum(residuals(reduced_model) ^ 2)
full <- sum(residuals(full_model) ^ 2)
f_statistic <- ((reduced - full)/(9-8)) / (full / 8)
# print(f_statistic)
pValueModelDiff[i] <- pf(f_statistic, 1, 8, lower.tail = FALSE)
}
}
myFrame <- data.frame( index, pValuesOneWayAnova,pValuesRegression,pValueModelDiff)
for( i in 1:nrow(dataCountsNorm))
{
index[i] <- i
for(i in 1: nrow(dataframe)){
row_data <- as.numeric(dataframe[i,])
reduced_model <- lm(row_data ~ reducedFactors)
full_model <- lm(row_data ~ fullModelFactor)
pValuesRegression[i] <- anova(reduced_model)$"Pr(>F)"[1]
pValuesOneWayAnova[i] <- anova(full_model)$"Pr(>F)"[1]
reduced <- sum(residuals(reduced_model) ^ 2)
full <- sum(residuals(full_model) ^ 2)
f_statistic <- ((reduced - full)/(9-8)) / (full / 8)
# print(f_statistic)
pValueModelDiff[i] <- pf(f_statistic, 1, 8, lower.tail = FALSE)
}
}
for( i in 1:nrow(dataCountsNorm))
{
index[i] <- i
row_data <- as.numeric(dataCountsNorm[i,])
reduced_model <- lm(row_data ~ reducedFactors)
full_model <- lm(row_data ~ fullModelFactor)
pValuesRegression[i] <- anova(reduced_model)$"Pr(>F)"[1]
pValuesOneWayAnova[i] <- anova(full_model)$"Pr(>F)"[1]
reduced <- sum(residuals(reduced_model) ^ 2)
full <- sum(residuals(full_model) ^ 2)
f_statistic <- ((reduced - full)/(9-8)) / (full / 8)
# print(f_statistic)
pValueModelDiff[i] <- pf(f_statistic, 1, 8, lower.tail = FALSE)
}
myFrame <- data.frame( index, pValuesOneWayAnova,pValuesRegression,pValueModelDiff)
View(myFrame)
myFrame <- myFrame[ order(myFrame$pValuesOneWayAnova), ]
boxplot( as.numeric( myTNorm[ myFrame$index[1],]) ~ cats )
boxplot( as.numeric( dataCountsNorm[ myFrame$index[1],]) ~ cats )
myFrame <- myFrame[ order(myFrame$pValueModelDiff), ]
boxplot( as.numeric( dataCountsNorm[ myFrame$index[1],]) ~ cats )
## B plot
cats <-  c( rep(2,3),rep(86,3),rep(128,5)  )
myFrame <- myFrame[ order(myFrame$pValuesRegression), ]
boxplot( as.numeric( dataCountsNorm[ myFrame$index[1],]) ~ cats )
rm(list=ls())
setwd("/Users/ericliao/Desktop/phD_courses/2022Spring_class/Advanced_Stat/lab/homework/lab7")
inFileName <- paste("prePostPhylum.txt", sep ="")
### Quesiton (1)
myT <-read.table(inFileName,header=TRUE,sep="\t")
numCols <- ncol(myT)
myColClasses <- c(rep("character",4), rep("numeric", numCols-4))
myT <-read.table(inFileName,header=TRUE,sep="\t",colClasses=myColClasses)
myTData<-myT[,5:10]
myPCOA <- princomp(myTData)
### Question (2)
autoplot(myPCOA, data = myT, colour = 'genotype')
autoplot(myPCOA, data = myT, colour = 'cage')
autoplot(myPCOA, data = myT, colour = 'time')
### Question (3)
p1_cage <- anova(lm(myPCOA$scores[,1] ~ myT$cage))$"Pr(>F)"[1]
p2_cage <- anova(lm(myPCOA$scores[,2] ~ myT$cage))$"Pr(>F)"[1]
p1_genotype <- anova(lm(myPCOA$scores[,1] ~ myT$genotype))$"Pr(>F)"[1]
p2_genotype <- anova(lm(myPCOA$scores[,1] ~ myT$genotype))$"Pr(>F)"[1]
p1_time <- anova(lm(myPCOA$scores[,1] ~ myT$time))$"Pr(>F)"[1]
p2_time <- anova(lm(myPCOA$scores[,1] ~ myT$time))$"Pr(>F)"[1]
#create matrix with 4 columns
tab <- matrix(c(p1_cage, p2_cage, p1_genotype, p2_genotype, p1_time, p2_time),
ncol=2, byrow=TRUE)
#define column names and row names of matrix
colnames(tab) <- c('PCA1', 'PCA2')
rownames(tab) <- c('Cage', 'Genotype', 'Time (pre vs. post)')
#convert matrix to table
tab <- as.table(tab)
tab
View(myTData)
View(myT)
### from the table, the time (pre vs. post) is most associated with both
### the first PCA axis and the second PCA axis. from the PCA1, the cage seems
### have NO effect on these data
post_dataset <- myT[myT$time == 'POST', ]
View(post_dataset)
View(post_dataset)
ncolumns(post_dataset)
ncol(post_dataset)
names(post_dataset)
View(post_dataset)
post_dataset[, 5:10])
post_dataset[, 5:10]
boxplot( as.numeric( post_dataset[, 5:10]) ~ post_dataset$cage )
post_dataset$cage
factors <- factor(post_dataset$cage)
factors
boxplot( as.numeric( post_dataset[, 5:10]) ~ factors )
boxplot( as.numeric( post_dataset[, 5]) ~ factors )
for (i in 5:10){
boxplot( as.numeric( post_dataset[, i]) ~ factors )
}
par(mfrow=c(3,2))
for (i in 5:10){
boxplot( as.numeric( post_dataset[, i]) ~ factors )
}
View(post_dataset)
for (i in nrow(post_dataset)){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
linearModel <- lm(genotype ~ cage, data = myFrame)
print(anova(linear)$"Pr(>F)"[1])
}
View(myT)
for (i in nrow(post_dataset)){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(sample, cage, genotype)
linearModel <- lm(genotype ~ cage, data = myFrame)
print(anova(linear)$"Pr(>F)"[1])
}
for (i in 5:10)){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
linearModel <- lm(genotype ~ cage, data = myFrame)
print(anova(linear)$"Pr(>F)"[1])
}
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
linearModel <- lm(genotype ~ cage, data = myFrame)
print(anova(linear)$"Pr(>F)"[1])
}
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
linearModel <- lme(data ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
print(anova(linear)$"Pr(>F)"[1])
}
install.packages("nlme")
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
linearModel <- lme(data ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
print(anova(linear)$"p-value"[2])
}
library(nlme)
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
linearModel <- lme(data ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
print(anova(linear)$"p-value"[2])
}
bug <- post_dataset[,5]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
View(myFrame)
linearModel <- lme(data ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
bug <- post_dataset[,5]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
myFrame = as.matrix(myFrame)
linearModel <- lme(data ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
bug <- post_dataset[,5]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
linearModel <- lme(data ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
myFrame <- data.frame(bug, cage, genotype)
bug <- post_dataset[,5]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
linearModel <- lme(bug ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
print(anova(linear)$"p-value"[2])
print(anova(linearModel)$"p-value"[2])
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
linearModel <- lme(bug ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
print(anova(linearModel)$"p-value"[2])
}
rm(list=ls())
setwd("/Users/ericliao/Desktop/phD_courses/2022Spring_class/Advanced_Stat/lab/homework/lab6")
dataCounts <- read.table("longitdunalRNASeqData/nc101_scaff_dataCounts.txt",header=TRUE,row.names = 1, sep="\t")
dataCounts <- dataCounts[apply(dataCounts, 1, median) > 5,]
dataCountsNorm <- dataCounts
for(i in 1:ncol(dataCounts)){
colSum = sum(dataCounts[, i])
dataCountsNorm[, i] <- dataCountsNorm[, i] / colSum
}
reducedFactors <- c(2, 2, 2, 86, 86, 86, 128, 128, 128, 128, 128)
get_anova_pvalues <- function(dataframe, factors) {
pvalueList <- vector()
for(i in 1: nrow(dataframe)){
pvalueList[i] <- anova(lm(as.numeric(dataframe[i,]) ~ factors))$"Pr(>F)"[1]
}
return(pvalueList)
}
pvalues <- get_anova_pvalues(dataCountsNorm, reducedFactors)
hist(pvalues)
adjusted_pvalues_anova <- p.adjust(pvalues, method="BH")
hist(pvalues)
rm(list=ls())
setwd("/Users/ericliao/Desktop/phD_courses/2022Spring_class/Advanced_Stat/lab/homework/lab6")
dataCounts <- read.table("longitdunalRNASeqData/nc101_scaff_dataCounts.txt",header=TRUE,row.names = 1, sep="\t")
dataCounts <- dataCounts[apply(dataCounts, 1, median) > 5,]
dataCountsNorm <- dataCounts
for(i in 1:ncol(dataCounts)){
colSum = sum(dataCounts[, i])
dataCountsNorm[, i] <- dataCountsNorm[, i] / colSum
}
reducedFactors <- c(2, 2, 2, 86, 86, 86, 128, 128, 128, 128, 128)
get_anova_pvalues <- function(dataframe, factors) {
pvalueList <- vector()
for(i in 1: nrow(dataframe)){
pvalueList[i] <- anova(lm(as.numeric(dataframe[i,]) ~ factors))$"Pr(>F)"[1]
}
return(pvalueList)
}
pvalues <- get_anova_pvalues(dataCountsNorm, reducedFactors)
hist(pvalues)
adjusted_pvalues_anova <- p.adjust(pvalues, method="BH")
counts <- function(dataset) {
newIndex <- vector()
counts <- 0
for(i in 1: length(dataset)){
if(is.na(dataset[i]))
{print(i)}
else
{if(dataset[i] < 0.05){
counts <- counts + 1
newIndex <- append(newIndex, i)
}}
}
return(list(counts, newIndex))
}
resultsReduced <- counts(adjusted_pvalues_anova)
## full model with three parameters
fullModelFactor <- c(2, 2, 2, 86, 86, 86, 128, 128, 128, 128, 128)
fullModelFactor <- factor(fullModelFactor)
pvalues <- get_anova_pvalues(dataCountsNorm, fullModelFactor)
hist(pvalues)
adjusted_pvalues_anova <- p.adjust(pvalues, method="BH")
resultsFull <- counts(adjusted_pvalues_anova)
compare_full_and_reduce_model <- function(dataframe, factorReduce, factorFull) {
pvalueList <- vector()
for(i in 1: nrow(dataframe)){
row_data <- as.numeric(dataframe[i,])
reduced_model <- lm(row_data ~ factorReduce)
full_model <- lm(row_data ~ factorFull)
reduced <- sum(residuals(reduced_model) ^ 2)
full <- sum(residuals(full_model) ^ 2)
f_statistic <- ((reduced - full)/(9-8)) / (full / 8)
# print(f_statistic)
pvalueList[i] <- pf(f_statistic, 1, 8, lower.tail = FALSE)
}
return(pvalueList)
}
pvalues <- compare_full_and_reduce_model(dataCountsNorm, reducedFactors, fullModelFactor)
hist(pvalues)
adjusted_pvalues_anova <- p.adjust(pvalues, method="BH")
ResultsComparedModels <- counts(adjusted_pvalues_anova)
### Question D:
pValuesOneWayAnova <- vector()
pValuesRegression <- vector()
pValueModelDiff <- vector()
index <- vector()
for( i in 1:nrow(dataCountsNorm))
{
index[i] <- i
row_data <- as.numeric(dataCountsNorm[i,])
reduced_model <- lm(row_data ~ reducedFactors)
full_model <- lm(row_data ~ fullModelFactor)
pValuesRegression[i] <- anova(reduced_model)$"Pr(>F)"[1]
pValuesOneWayAnova[i] <- anova(full_model)$"Pr(>F)"[1]
reduced <- sum(residuals(reduced_model) ^ 2)
full <- sum(residuals(full_model) ^ 2)
f_statistic <- ((reduced - full)/(9-8)) / (full / 8)
# print(f_statistic)
pValueModelDiff[i] <- pf(f_statistic, 1, 8, lower.tail = FALSE)
}
myFrame <- data.frame( index, pValuesOneWayAnova,pValuesRegression,pValueModelDiff)
## A plot
cats <- factor( c( rep("day3",3),rep("week12",3),rep("week20",5)  ))
myFrame <- myFrame[ order(myFrame$pValuesOneWayAnova), ]
boxplot( as.numeric( dataCountsNorm[ myFrame$index[1],]) ~ cats )
## B plot
cats <-  c( rep(2,3),rep(86,3),rep(128,5)  )
myFrame <- myFrame[ order(myFrame$pValuesRegression), ]
boxplot( as.numeric( dataCountsNorm[ myFrame$index[1],]) ~ cats )
## C plot
cats <- factor( c( rep("day3",3),rep("week12",3),rep("week20",5)  ))
myFrame <- myFrame[ order(myFrame$pValueModelDiff), ]
boxplot( as.numeric( dataCountsNorm[ myFrame$index[1],]) ~ cats )
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
mixedModel <- lme(bug ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
print(unclass(summary(mixedModel))$tTable[2,5])
}
rm(list=ls())
setwd("/Users/ericliao/Desktop/phD_courses/2022Spring_class/Advanced_Stat/lab/homework/lab7")
inFileName <- paste("prePostPhylum.txt", sep ="")
### Quesiton (1)
myT <-read.table(inFileName,header=TRUE,sep="\t")
numCols <- ncol(myT)
myColClasses <- c(rep("character",4), rep("numeric", numCols-4))
myT <-read.table(inFileName,header=TRUE,sep="\t",colClasses=myColClasses)
myTData<-myT[,5:10]
myPCOA <- princomp(myTData)
### Question (2)
autoplot(myPCOA, data = myT, colour = 'genotype')
autoplot(myPCOA, data = myT, colour = 'cage')
autoplot(myPCOA, data = myT, colour = 'time')
### Question (3)
p1_cage <- anova(lm(myPCOA$scores[,1] ~ myT$cage))$"Pr(>F)"[1]
p2_cage <- anova(lm(myPCOA$scores[,2] ~ myT$cage))$"Pr(>F)"[1]
p1_genotype <- anova(lm(myPCOA$scores[,1] ~ myT$genotype))$"Pr(>F)"[1]
p2_genotype <- anova(lm(myPCOA$scores[,1] ~ myT$genotype))$"Pr(>F)"[1]
p1_time <- anova(lm(myPCOA$scores[,1] ~ myT$time))$"Pr(>F)"[1]
p2_time <- anova(lm(myPCOA$scores[,1] ~ myT$time))$"Pr(>F)"[1]
#create matrix with 4 columns
tab <- matrix(c(p1_cage, p2_cage, p1_genotype, p2_genotype, p1_time, p2_time),
ncol=2, byrow=TRUE)
#define column names and row names of matrix
colnames(tab) <- c('PCA1', 'PCA2')
rownames(tab) <- c('Cage', 'Genotype', 'Time (pre vs. post)')
#convert matrix to table
tab <- as.table(tab)
tab
post_dataset <- myT[myT$time == 'POST', ]
factors <- factor(post_dataset$cage)
for (i in 5:10){
boxplot( as.numeric( post_dataset[, i]) ~ factors )
}
library(nlme)
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
mixedModel <- lme(bug ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
print(unclass(summary(mixedModel))$tTable[2,5])
}
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
mixedModel <- lme(bug ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
pvalues[i-4] <- unclass(summary(mixedModel))$tTable[2,5]
}
pvalues <- vector()
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
mixedModel <- lme(bug ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
pvalues[i-4] <- unclass(summary(mixedModel))$tTable[2,5]
}
pvalues
library(nlme)
pvaluesMixed <- vector()
pvalueGLS <- vector
coefs <- vector()
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
mixedModel <- lme(bug ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
pvaluesMixed[i-4] <- unclass(summary(mixedModel))$tTable[2,5]
GLS <- gls(bug ~ genotype, method="REML", correlation = corCompSymm(form = ~1 | cage, data=myFrame))
pvalueGLS[i-4] <- anova(GLS)$"p-vallue"[2]
coefs[i-4] <- coef(GLS$modelStruct[1]$corStruct, unconstained=FALSE)[[1]]
}
library(nlme)
pvaluesMixed <- vector()
pvalueGLS <- vector
coefs <- vector()
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
mixedModel <- lme(bug ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
pvaluesMixed[i-4] <- unclass(summary(mixedModel))$tTable[2,5]
GLS <- gls(bug ~ genotype, method="REML", correlation = corCompSymm(form = ~1 | cage), data=myFrame)
pvalueGLS[i-4] <- anova(GLS)$"p-vallue"[2]
coefs[i-4] <- coef(GLS$modelStruct[1]$corStruct, unconstained=FALSE)[[1]]
}
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
mixedModel <- lme(bug ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
pvaluesMixed[i-4] <- unclass(summary(mixedModel))$tTable[2,5]
GLS <- gls(bug ~ genotype, method="REML", correlation = corCompSymm(form = ~1 | cage), data=myFrame)
pvalueGLS[i-4] <- anova(GLS)$"p-value"[2]
coefs[i-4] <- coef(GLS$modelStruct[1]$corStruct, unconstained=FALSE)[[1]]
}
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
mixedModel <- lme(bug ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
pvaluesMixed[i-4] <- unclass(summary(mixedModel))$tTable[2,5]
GLS <- gls(bug ~ genotype, method="REML", correlation = corCompSymm(form = ~1 | cage), data=myFrame)
# pvalueGLS[i-4] <- anova(GLS)$"p-value"[2]
coefs[i-4] <- coef(GLS$modelStruct[1]$corStruct, unconstained=FALSE)[[1]]
}
adjusted_pvalues_mixed <- p.adjust(pvaluesMixed, method="BH")
hist(adjusted_pvalues_mixed)
hist(adjusted_pvalues_mixed, breaks = 100)
hist(adjusted_pvalues_mixed, breaks = 150)
hist(adjusted_pvalues_mixed, breaks = 50)
hist(adjusted_pvalues_mixed, breaks = 10)
coefs
rm(list=ls())
setwd("/Users/ericliao/Desktop/phD_courses/2022Spring_class/Advanced_Stat/lab/homework/lab7")
inFileName <- paste("prePostPhylum.txt", sep ="")
### Quesiton (1)
myT <-read.table(inFileName,header=TRUE,sep="\t")
numCols <- ncol(myT)
myColClasses <- c(rep("character",4), rep("numeric", numCols-4))
myT <-read.table(inFileName,header=TRUE,sep="\t",colClasses=myColClasses)
myTData<-myT[,5:10]
myPCOA <- princomp(myTData)
### Question (2)
autoplot(myPCOA, data = myT, colour = 'genotype')
autoplot(myPCOA, data = myT, colour = 'cage')
autoplot(myPCOA, data = myT, colour = 'time')
### Question (3)
p1_cage <- anova(lm(myPCOA$scores[,1] ~ myT$cage))$"Pr(>F)"[1]
p2_cage <- anova(lm(myPCOA$scores[,2] ~ myT$cage))$"Pr(>F)"[1]
p1_genotype <- anova(lm(myPCOA$scores[,1] ~ myT$genotype))$"Pr(>F)"[1]
p2_genotype <- anova(lm(myPCOA$scores[,1] ~ myT$genotype))$"Pr(>F)"[1]
p1_time <- anova(lm(myPCOA$scores[,1] ~ myT$time))$"Pr(>F)"[1]
p2_time <- anova(lm(myPCOA$scores[,1] ~ myT$time))$"Pr(>F)"[1]
#create matrix with 4 columns
tab <- matrix(c(p1_cage, p2_cage, p1_genotype, p2_genotype, p1_time, p2_time),
ncol=2, byrow=TRUE)
#define column names and row names of matrix
colnames(tab) <- c('PCA1', 'PCA2')
rownames(tab) <- c('Cage', 'Genotype', 'Time (pre vs. post)')
#convert matrix to table
tab <- as.table(tab)
tab
post_dataset <- myT[myT$time == 'POST', ]
factors <- factor(post_dataset$cage)
for (i in 5:10){
boxplot( as.numeric( post_dataset[, i]) ~ factors )
}
library(nlme)
pvaluesMixed <- vector()
pvalueGLS <- vector
coefs <- vector()
for (i in 5:10){
bug <- post_dataset[,i]
cage <- post_dataset$cage
genotype <- post_dataset$genotype
myFrame <- data.frame(bug, cage, genotype)
mixedModel <- lme(bug ~ genotype, method="REML", random = ~1 | cage, data = myFrame)
pvaluesMixed[i-4] <- unclass(summary(mixedModel))$tTable[2,5]
GLS <- gls(bug ~ genotype, method="REML", correlation = corCompSymm(form = ~1 | cage), data=myFrame)
# pvalueGLS[i-4] <- anova(GLS)$"p-value"[2]
coefs[i-4] <- coef(GLS$modelStruct[1]$corStruct, unconstained=FALSE)[[1]]
}
adjusted_pvalues_mixed <- p.adjust(pvaluesMixed, method="BH")
hist(adjusted_pvalues_mixed, breaks = 10)
