posteriorDist <- vector(length=numBreaks)
xVals <- seq(0,1,1/numBreaks);
i <- 1;
sum <- 0;
for( x in xVals )
{
# our prior with 9 heads and 9 tails
# our new data with 14 heads and 10 tails
posteriorDist[i] <- (dexp(0.5, rate=5) / 0.9932621) * dbinom( 14, 24, x)
sum = sum + posteriorDist[i];
i <- i + 1;
}
plot( posteriorDist / sum )
# grid approach to beta prior using a naive (brute force) numerical integration algorithm
rm(list=ls())
numBreaks=100000;
posteriorDist <- vector(length=numBreaks)
xVals <- seq(0,1,1/numBreaks);
i <- 1;
sum <- 0;
for( x in xVals )
{
# our prior with 9 heads and 9 tails
# our new data with 14 heads and 10 tails
posteriorDist[i] <- (dexp(0.5, rate=5) / 0.9932621) * dbinom( 14, 24, x)
sum = sum + posteriorDist[i];
i <- i + 1;
}
plot( posteriorDist / sum )
# 1(B)
rm(list=ls())
piOld <- 0.5
numBreaks <- 1000
numIterations <- 500000
posteiorDist <- vector(length=numBreaks)
xVals <- seq(0,1, 1/numBreaks)
for( i in 1:numIterations )
{
pOld <-  (dexp(piOld, rate=5) / 0.9932621) * dbinom( 14, 24, piOld )
piNew <- piOld + rnorm(1, 0, sd =0.01);
if( piNew > 1)
piNew = 1;
if( piNew < 0 )
piNew =0;
pNew <- (dexp(piNew, rate=5) / 0.9932621) * dbinom( 14, 24, piNew )
ratio <- pNew / pOld
if( ratio > 1 || ratio >= runif(1) )
piOld = piNew;
posteiorDist[i] = piOld;
n <- 1;
sum <- 0;
for( x in xVals )
{
# our prior with 9 heads and 9 tails
# our new data with 14 heads and 10 tails
posteriorDist[n] <- (dexp(0.5, rate=5) / 0.9932621) * dbinom( 14, 24, x)
sum = sum + posteriorDist[i];
n <- n + 1;
if( i %% 100 == 0 )
{
myHist <- hist(posteiorDist,breaks=200,plot=FALSE)
plot( myHist$mids, myHist$counts/i, main = paste("iteration", i), ylim = c(0, 0.05))
# exact
dbetasum = sum(dbeta(myHist$mids, 40+14, 40+10))
lines(myHist$mids, dbeta(myHist$mids, 40+14, 40+10)/dbetasum,col="red", ylim=c(0,0.05))
plot( posteriorDist / sum )
Sys.sleep(.1)
}
}
# 1(C)
rm(list=ls())
# 1(B)
rm(list=ls())
piOld <- 0.5
numBreaks <- 1000
numIterations <- 500000
posteiorDist <- vector(length=numBreaks)
xVals <- seq(0,1, 1/numBreaks)
for( i in 1:numIterations )
{
# prior with expotential probability
# new data 14 heads and 10 tails
pOld <-  (dexp(piOld, rate=5) / 0.9932621) * dbinom( 14, 24, piOld )
piNew <- piOld + rnorm(1, 0, sd =0.01);
if( piNew > 1)
piNew = 1;
if( piNew < 0 )
piNew =0;
pNew <- (dexp(piNew, rate=5) / 0.9932621) * dbinom( 14, 24, piNew )
ratio <- pNew / pOld
if( ratio > 1 || ratio >= runif(1) )
piOld = piNew;
posteiorDist[i] = piOld;
n <- 1;
sum <- 0;
for( x in xVals )
{
# our prior with 9 heads and 9 tails
# our new data with 14 heads and 10 tails
posteriorDist[n] <- (dexp(0.5, rate=5) / 0.9932621) * dbinom( 14, 24, x)
sum = sum + posteriorDist[i];
n <- n + 1;
}
if( i %% 100 == 0 )
{
myHist <- hist(posteiorDist,breaks=200,plot=FALSE)
plot( myHist$mids, myHist$counts/i, main = paste("iteration", i), ylim = c(0, 0.05))
# exact
dbetasum = sum(dbeta(myHist$mids, 40+14, 40+10))
lines(myHist$mids, dbeta(myHist$mids, 40+14, 40+10)/dbetasum,col="red")
#plot( posteriorDist / sum )
Sys.sleep(.1)
}
}
# 1(B)
rm(list=ls())
piOld <- 0.5
numBreaks <- 1000
numIterations <- 1000
posteiorDist <- vector(length=numBreaks)
xVals <- seq(0,1, 1/numBreaks)
for( i in 1:numIterations )
{
# prior with expotential probability
# new data 14 heads and 10 tails
pOld <-  (dexp(piOld, rate=5) / 0.9932621) * dbinom( 14, 24, piOld )
piNew <- piOld + rnorm(1, 0, sd =0.01);
if( piNew > 1)
piNew = 1;
if( piNew < 0 )
piNew =0;
pNew <- (dexp(piNew, rate=5) / 0.9932621) * dbinom( 14, 24, piNew )
ratio <- pNew / pOld
if( ratio > 1 || ratio >= runif(1) )
piOld = piNew;
posteiorDist[i] = piOld;
n <- 1;
sum <- 0;
for( x in xVals )
{
# our prior with 9 heads and 9 tails
# our new data with 14 heads and 10 tails
posteriorDist[n] <- (dexp(0.5, rate=5) / 0.9932621) * dbinom( 14, 24, x)
sum = sum + posteriorDist[i];
n <- n + 1;
}
if( i %% 100 == 0 )
{
myHist <- hist(posteiorDist,breaks=200,plot=FALSE)
plot( myHist$mids, myHist$counts/i, main = paste("iteration", i), ylim = c(0, 0.05))
# exact
dbetasum = sum(dbeta(myHist$mids, 40+14, 40+10))
lines(myHist$mids, dbeta(myHist$mids, 40+14, 40+10)/dbetasum,col="red")
#plot( posteriorDist / sum )
Sys.sleep(.1)
}
}
# 1(B)
rm(list=ls())
piOld <- 0.5
numBreaks <- 1000
numIterations <- 1000
posteiorDist <- vector(length=numBreaks)
xVals <- seq(0,1, 1/numBreaks)
n <- 1;
sum <- 0;
for( x in xVals )
{
# our prior with 9 heads and 9 tails
# our new data with 14 heads and 10 tails
posteriorDist[n] <- (dexp(x, rate=5) / 0.9932621) * dbinom( 14, 24, x)
sum = sum + posteriorDist[i];
n <- n + 1;
}
for( i in 1:numIterations )
{
# prior with expotential probability
# new data 14 heads and 10 tails
pOld <-  (dexp(piOld, rate=5) / 0.9932621) * dbinom( 14, 24, piOld )
piNew <- piOld + rnorm(1, 0, sd =0.01);
if( piNew > 1)
piNew = 1;
if( piNew < 0 )
piNew =0;
pNew <- (dexp(piNew, rate=5) / 0.9932621) * dbinom( 14, 24, piNew )
ratio <- pNew / pOld
if( ratio > 1 || ratio >= runif(1) )
piOld = piNew;
posteiorDist[i] = piOld;
if( i %% 100 == 0 ){
myHist <- hist(posteiorDist,breaks=200,plot=FALSE)
plot( myHist$mids, myHist$counts/i, main = paste("iteration", i), ylim = c(0, 0.05))
# exact
dbetasum = sum(dbeta(myHist$mids, 40+14, 40+10))
lines(myHist$mids, dbeta(myHist$mids, 40+14, 40+10)/dbetasum,col="red")
plot( posteriorDist / sum )
Sys.sleep(.1)
}
}
# 1(B)
rm(list=ls())
piOld <- 0.5
numBreaks <- 1000
numIterations <- 1000
posteiorDist <- vector(length=numBreaks)
xVals <- seq(0,1, 1/numBreaks)
n <- 1;
sum <- 0;
for( x in xVals )
{
# our prior with 9 heads and 9 tails
# our new data with 14 heads and 10 tails
posteriorDist[n] <- (dexp(x, rate=5) / 0.9932621) * dbinom( 14, 24, x)
sum = sum + posteriorDist[i];
n <- n + 1;
}
for( i in 1:numIterations )
{
# prior with expotential probability
# new data 14 heads and 10 tails
pOld <-  (dexp(piOld, rate=5) / 0.9932621) * dbinom( 14, 24, piOld )
piNew <- piOld + rnorm(1, 0, sd =0.01);
if( piNew > 1)
piNew = 1;
if( piNew < 0 )
piNew =0;
pNew <- (dexp(piNew, rate=5) / 0.9932621) * dbinom( 14, 24, piNew )
ratio <- pNew / pOld
if( ratio > 1 || ratio >= runif(1) )
piOld = piNew;
posteiorDist[i] = piOld;
if( i %% 100 == 0 ){
myHist <- hist(posteiorDist,breaks=200,plot=FALSE)
plot( myHist$mids, myHist$counts/i, main = paste("iteration", i), ylim = c(0, 0.05))
# exact
dbetasum = sum(dbeta(myHist$mids, 40+14, 40+10))
lines(myHist$mids, dbeta(myHist$mids, 40+14, 40+10)/dbetasum,col="red")
plot( myHist$mids,posteriorDist / sum )
Sys.sleep(.1)
}
}
# 1(B)
rm(list=ls())
piOld <- 0.5
numBreaks <- 1000
numIterations <- 1000
gridPosteiorDist <- vector(length=numBreaks)
xVals <- seq(0,1, 1/numBreaks)
n <- 1;
sum <- 0;
for( x in xVals )
{
# our prior with 9 heads and 9 tails
# our new data with 14 heads and 10 tails
gridPosteiorDist[n] <- (dexp(x, rate=5) / 0.9932621) * dbinom( 14, 24, x)
sum = sum + gridPosteiorDist[i];
n <- n + 1;
}
for( i in 1:numIterations )
{
# prior with expotential probability
# new data 14 heads and 10 tails
pOld <-  (dexp(piOld, rate=5) / 0.9932621) * dbinom( 14, 24, piOld )
piNew <- piOld + rnorm(1, 0, sd =0.01);
if( piNew > 1)
piNew = 1;
if( piNew < 0 )
piNew =0;
pNew <- (dexp(piNew, rate=5) / 0.9932621) * dbinom( 14, 24, piNew )
ratio <- pNew / pOld
if( ratio > 1 || ratio >= runif(1) )
piOld = piNew;
posteiorDist[i] = piOld;
if( i %% 100 == 0 ){
myHist <- hist(posteiorDist,breaks=200,plot=FALSE)
plot( myHist$mids, myHist$counts/i, main = paste("iteration", i), ylim = c(0, 0.05))
# exact
dbetasum = sum(dbeta(myHist$mids, 40+14, 40+10))
lines(myHist$mids, dbeta(myHist$mids, 40+14, 40+10)/dbetasum,col="red")
plot(gridPosteiorDist / sum )
Sys.sleep(.1)
}
}
# 1(B)
rm(list=ls())
piOld <- 0.5
numBreaks <- 1000
numIterations <- 1000
gridPosteiorDist <- vector(length=numBreaks)
xVals <- seq(0,1, 1/numBreaks)
n <- 1;
sum <- 0;
for( x in xVals )
{
# our prior with 9 heads and 9 tails
# our new data with 14 heads and 10 tails
gridPosteiorDist[n] <- (dexp(x, rate=5) / 0.9932621) * dbinom( 14, 24, x)
sum = sum + gridPosteiorDist[i];
n <- n + 1;
}
plot(gridPosteiorDist / sum )
# 1(B)
rm(list=ls())
piOld <- 0.5
numBreaks <- 1000
numIterations <- 1000
gridPosteiorDist <- vector(length=numBreaks)
xVals <- seq(0,1, 1/numBreaks)
n <- 1;
sum <- 0;
for( x in xVals )
{
# our prior with 9 heads and 9 tails
# our new data with 14 heads and 10 tails
gridPosteiorDist[n] <- (dexp(x, rate=5) / 0.9932621) * dbinom( 14, 24, x)
sum = sum + gridPosteiorDist[n];
n <- n + 1;
}
plot(gridPosteiorDist / sum )
# 1(B)
rm(list=ls())
piOld <- 0.5
numBreaks <- 1000
numIterations <- 1000
gridPosteiorDist <- vector(length=numBreaks)
xVals <- seq(0,1, 1/numBreaks)
n <- 1;
sum <- 0;
for( x in xVals )
{
# our prior with 9 heads and 9 tails
# our new data with 14 heads and 10 tails
gridPosteiorDist[n] <- (dexp(x, rate=5) / 0.9932621) * dbinom( 14, 24, x)
sum = sum + gridPosteiorDist[n];
n <- n + 1;
}
for( i in 1:numIterations )
{
# prior with expotential probability
# new data 14 heads and 10 tails
pOld <-  (dexp(piOld, rate=5) / 0.9932621) * dbinom( 14, 24, piOld )
piNew <- piOld + rnorm(1, 0, sd =0.01);
if( piNew > 1)
piNew = 1;
if( piNew < 0 )
piNew =0;
pNew <- (dexp(piNew, rate=5) / 0.9932621) * dbinom( 14, 24, piNew )
ratio <- pNew / pOld
if( ratio > 1 || ratio >= runif(1) )
piOld = piNew;
posteiorDist[i] = piOld;
if( i %% 100 == 0 ){
myHist <- hist(posteiorDist,breaks=200,plot=FALSE)
plot( myHist$mids, myHist$counts/i, main = paste("iteration", i), ylim = c(0, 0.05))
# exact
dbetasum = sum(dbeta(myHist$mids, 40+14, 40+10))
lines(myHist$mids, dbeta(myHist$mids, 40+14, 40+10)/dbetasum,col="red")
plot(myHist$mids, gridPosteiorDist / sum )
Sys.sleep(.1)
}
}
# 1(B)
rm(list=ls())
piOld <- 0.5
numBreaks <- 1000
numIterations <- 1000
gridPosteiorDist <- vector(length=numBreaks)
xVals <- seq(0,1, 1/numBreaks)
for( i in 1:numIterations )
{
# prior with expotential probability
# new data 14 heads and 10 tails
pOld <-  (dexp(piOld, rate=5) / 0.9932621) * dbinom( 14, 24, piOld )
piNew <- piOld + rnorm(1, 0, sd =0.01);
if( piNew > 1)
piNew = 1;
if( piNew < 0 )
piNew =0;
pNew <- (dexp(piNew, rate=5) / 0.9932621) * dbinom( 14, 24, piNew )
ratio <- pNew / pOld
if( ratio > 1 || ratio >= runif(1) )
piOld = piNew;
posteiorDist[i] = piOld;
if( i %% 100 == 0 ){
myHist <- hist(posteiorDist,breaks=200,plot=FALSE)
plot( myHist$mids, myHist$counts/i, main = paste("iteration", i), ylim = c(0, 0.05))
# exact
dbetasum = sum(dbeta(myHist$mids, 40+14, 40+10))
lines(myHist$mids, dbeta(myHist$mids, 40+14, 40+10)/dbetasum,col="red")
#plot(myHist$mids, gridPosteiorDist / sum )
Sys.sleep(.1)
}
}
# 1(B)
rm(list=ls())
piOld <- 0.5
numBreaks <- 1000
numIterations <- 1000
gridPosteiorDist <- vector(length=numBreaks)
xVals <- seq(0,1, 1/numBreaks)
for( i in 1:numIterations )
# 1(B)
rm(list=ls())
piOld <- 0.5
numBreaks <- 1000
numIterations <- 500000
posteiorDist <- vector(length=numBreaks)
xVals <- seq(0,1, 1/numBreaks)
for( i in 1:numIterations )
{
# prior with expotential probability
# new data 14 heads and 10 tails
pOld <-  (dexp(piOld, rate=5) / 0.9932621) * dbinom( 14, 24, piOld )
piNew <- piOld + rnorm(1, 0, sd =0.01);
if( piNew > 1)
piNew = 1;
if( piNew < 0 )
piNew =0;
pNew <- (dexp(piNew, rate=5) / 0.9932621) * dbinom( 14, 24, piNew )
ratio <- pNew / pOld
if( ratio > 1 || ratio >= runif(1) )
piOld = piNew;
posteiorDist[i] = piOld;
if( i %% 100 == 0 )
{
myHist <- hist(posteiorDist,breaks=200,plot=FALSE)
plot( myHist$mids, myHist$counts/i, main = paste("iteration", i), ylim = c(0, 0.05))
dbetasum = sum(dbeta(myHist$mids, 40+14, 40+10))
lines(myHist$mids, dbeta(myHist$mids, 40+14, 40+10)/dbetasum,col="red", ylim=c(0,0.05))
Sys.sleep(.1)
}
}
attach(faithful)
erruptions
eruptions
lines(density(eruptions, bv=0.1))
lines(density(eruptions, bw=0.1))
lines(density(eruptions, bw=0.1))
hist(eruptions)
lines(density(eruptions, bw=0.1))
choose(5,2)
choose(2,5)
rm(list=ls())
library("dplyr")
library("devtools")
setwd("/Users/ericliao/Desktop/phD_courses/2022Spring_class/Advanced_Stat/lab/homework/project")
myTable <- read.table("statsData_st000061_st000065.csv",header=TRUE,row.names = 1, sep = ",")
columnNameList <- colnames(myTable)
###### Perform ANoVA test on entire dataset to see if there is significant different between cells in different tissues
factors <- vector()
for(i in 1:length(columnNameList)){
print(columnNameList[i])
if (endsWith(columnNameList[i], "Human.Serum")){
factors[i] <- 0
}
if (endsWith(columnNameList[i], "Visceral.Fat")){
factors[i] <- 1
}
if (endsWith(columnNameList[i], "Subcutaenous.Fat")){
factors[i] <- 2
}
}
get_anova_pvalues <- function(dataframe) {
pvalueList <- vector()
for(i in 1: nrow(dataframe)){
pvalueList[i] <- anova(lm(factors ~ as.numeric(myTable[i,])))$"Pr(>F)"[1]
}
return(pvalueList)
}
pvalueList_anova <- get_anova_pvalues(myTable)
hist(pvalueList_anova)
adjusted_pvalues_anova <- p.adjust(pvalueList_anova, method="BH")
hist(adjusted_pvalues_anova, xlim=c(0,1))
# 1. Serum vs. Visceral Fat
df_serum_visceral <- myTable %>% select(ends_with('Human.Serum') | ends_with('Visceral.Fat'))
columnNameList <- colnames(df_serum_visceral)
get_ttest_pvalues <- function(dataframe,group_a_name, group_b_name) {
pvalueList <- vector()
x <- vector()
y <- vector()
for(m in 1: nrow(dataframe)){
x <- dataframe[m,] %>% select(ends_with(group_a_name))
y <- dataframe[m,] %>% select(ends_with(group_b_name))
pvalueList[m] <- t.test(x, y)$p.value
}
return(pvalueList)
}
pvalueListSerumVisceral <- get_ttest_pvalues(df_serum_visceral,"Human.Serum", "Visceral.Fat")
hist(pvalueListSerumVisceral)
adjusted_pvalues_serum_visceral_fat <- p.adjust(pvalueListSerumVisceral, method="BH")
hist(adjusted_pvalues_serum_visceral_fat, xlim=c(0,1))
# 2. Serum vs. Subcutaenous Fat
df_serum_subcutaenous<- myTable %>% select(ends_with('Human.Serum') | ends_with('Subcutaenous.Fat'))
columnNameList <- colnames(df_serum_subcutaenous)
pvalueListSerumSubcutaenous <- get_ttest_pvalues(df_serum_subcutaenous,"Human.Serum", "Subcutaenous.Fat")
hist(pvalueListSerumSubcutaenous)
adjusted_pvalues_serum_subcutaenous <- p.adjust(pvalueListSerumSubcutaenous, method="BH")
hist(adjusted_pvalues_serum_subcutaenous, xlim=c(0,1))
#3. Reduction(normal) vs. HER2
df_visceral_subcutaenous<- myTable %>% select(ends_with('Visceral.Fat') | ends_with('Subcutaenous.Fat'))
columnNameList <- colnames(df_visceral_subcutaenous)
pvalueListVisceralSubcutaenous <- get_ttest_pvalues(df_visceral_subcutaenous,"Visceral.Fat", "Subcutaenous.Fat")
hist(pvalueListVisceralSubcutaenous)
adjusted_pvalues_visceral_subcutaenous <- p.adjust(pvalueListVisceralSubcutaenous, method="BH")
adjusted_pvalues_visceral_subcutaenous <- p.adjust(pvalueListVisceralSubcutaenous, method="BH")
hist(adjusted_pvalues_visceral_subcutaenous, xlim=c(0,1))
## perform PCA to see if there is any separation between cells in diferent stages
myPca <- prcomp(t(myTable), center = TRUE,scale. = TRUE)
tissue_type <- c("Human Serum", "Visceral Fat", "Subcutaenous Fat")
library(ggfortify)
pcaPlot <- autoplot(myPca, data = t(myTable), colour = factors)
print(pcaPlot)
